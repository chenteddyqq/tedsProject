import java.util.Random;
import java.util.Scanner;

public class MultiCalc {

	private int threadNum; //线程数
	public static int flagNum;
	
	public static long result;
	
	private void startUp() {
		
		long numbers = 1000L;
		
		System.out.println("Pls input thread numbers");
		Scanner input = new Scanner(System.in);
		threadNum = input.nextInt();
		System.out.println("开始计算");
		for(int i=1; i<=threadNum;i++) { //分开算是关键，多线程拷贝文件也是一样的
			innerCalc tt;
			if(i==threadNum) {
				tt = new innerCalc((i-1)*numbers/threadNum+1, numbers);
				//System.out.println((i-1)*numbers/threadNum+1+" "+numbers);
			}else {
				tt = new innerCalc((i-1)*numbers/threadNum+1, i*numbers/threadNum);
				//System.out.println((i-1)*numbers/threadNum+1+" "+i*numbers/threadNum);
			}
			new Thread(tt).start();
		}
		try {
			synchronized (MultiCalc.this) { //同步代码在哪个Instance上也是很关键的
				this.wait();
			}
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		System.out.println("计算完成：" + result);
	}

	public static void main(String[] args) {
		new MultiCalc().startUp();
	}
	
	class innerCalc implements Runnable{
		private long start;
		private long end;
		
		public innerCalc(long start,long end) {
			this.start=start;
			this.end = end;
		}
		
		@Override
		public void run() {
			long tmp=0;
			for(long i = start ; i<=end;i++) {
				tmp += i;
			}
			try {
				Thread.sleep(new Random().nextInt(1000));
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			synchronized (MultiCalc.this) {
				result += tmp;
				flagNum++;
				if(flagNum == threadNum) 
					MultiCalc.this.notify();
			}
			System.out.println(Thread.currentThread()+" is done " + tmp);
		}	
	}
}
